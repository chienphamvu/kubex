#!/bin/bash

# Check if kubectl is installed
if ! command -v kubectl &> /dev/null
then
  echo "kubectl could not be found. Please install kubectl."
  exit 1
fi

# Check if kubecolor is installed
if command -v kubecolor &> /dev/null
then
  KUBECTL_COLOR="kubecolor"
else
  KUBECTL_COLOR="kubectl"
  echo "kubecolor not found, using kubectl instead. Please install kubecolor for colored output."
fi

# Define the temporary directory
KUBEX_TMP_DIR="/tmp/kubex"

# Create the temporary directory if it doesn't exist
mkdir -p "$KUBEX_TMP_DIR"

# Check if KUBEX_ISOLATED is set to true
if [ "$KUBEX_ISOLATED" = "true" ]; then
  # Use the terminal session ID to isolate the namespace list
  session_id=$(tty | sed 's/\/dev\///')
  LAST_LIST_FILE="$KUBEX_TMP_DIR/last_list_${session_id}.txt"
else
  LAST_LIST_FILE="$KUBEX_TMP_DIR/last_list.txt"
fi

# Create a temporary file to store context and namespace for the session
session_id=$(tty | sed 's/\/dev\///' | tr -cd A-Za-z0-9_)
session_config_file="$KUBEX_TMP_DIR/kubex_session_${session_id}.conf"

# Function to write context and namespace to the session config file
write_session_config() {
  echo "context: $1" > "$session_config_file"
  echo "namespace: $2" >> "$session_config_file"
}

# Function to read context and namespace from the session config file
read_session_config() {
  local current_context_details

  if [ -f "$session_config_file" ] && [ "$KUBEX_ISOLATED" = "true" ]; then
    CONTEXT=$(grep "context:" "$session_config_file" | awk -F': ' '{print $2}')
    NAMESPACE=$(grep "namespace:" "$session_config_file" | awk -F': ' '{print $2}')
  else
    CONTEXT=$(kubectl config current-context)
    current_context_details=$(kubectl config get-contexts | grep " ${CONTEXT} ")
    NAMESPACE=$(echo "$current_context_details" | awk '{print $5}')
  fi
}

COMMAND=$1
shift

set_context_args() {
  local object_type
  CONTEXT_ARGS=()

  if [ "$KUBEX_ISOLATED" = "true" ]; then
    CONTEXT_ARGS+=("--context=$CONTEXT")
    if [ "$object_type" != "ns" ] && [ "$object_type" != "namespace" ] && [ "$object_type" != "namespaces" ]; then
      CONTEXT_ARGS+=("--namespace=$NAMESPACE")
    fi
  fi
}

grep_and_switch_namespace() {
  local namespace_substring=$1
  MATCH=""

  if [ "$KUBEX_ISOLATED" = "true" ]; then
    # Use the terminal session ID to isolate the namespace list
    session_id=$(tty | sed 's/\/dev\///')
    local namespaces_file="$KUBEX_TMP_DIR/namespaces_${CONTEXT}_${session_id}.txt"
  else
    local namespaces_file="$KUBEX_TMP_DIR/namespaces_$(kubectl config current-context).txt"
  fi

  if [[ $namespace_substring =~ ^[0-9]+$ ]]; then
    namespace_substring=$(get_item_name "$namespace_substring")
  fi

  if ! ([ -f "$namespaces_file" ]) || ([ -f "$namespaces_file" ] && ! grep -q "$namespace_substring" "$namespaces_file"); then
    touch "$namespaces_file"
    echo "Getting namespaces..."
    if [ "$KUBEX_ISOLATED" = "true" ]; then
      kubectl get namespaces --context=$CONTEXT > "$namespaces_file"
    else
      kubectl get namespaces > "$namespaces_file"
    fi
  fi

  handle_matching "$namespace_substring" "$namespaces_file" "namespace"

  # switch default namespace
  if [ -n "$MATCH" ]; then
    NAMESPACE="$MATCH"
    if [ "$KUBEX_ISOLATED" = "true" ]; then
      write_session_config "$CONTEXT" "$NAMESPACE"
      echo "Switched default namespace to $MATCH (session-only)"
    else
      kubectl config set-context --current --namespace="$MATCH" > /dev/null
      echo "Switched default namespace to $MATCH"
    fi
  else
    echo "No namespace matches '$namespace_substring'!"
    exit 1
  fi
}

get_item_name() {
  local line_number="$1"

  item_name=$(awk -v line_num="$line_number" '$1 == line_num {print $2}' "$LAST_LIST_FILE" | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g')

  if [[ -n "$item_name" ]]; then
    echo "$item_name"
  else
    echo "Error: '$line_number' does not exist!"
    exit 1
  fi
}

list_items() {
  local object=$1
  shift

  set_context_args "$object_type"

  if [[ "$@" == *"-w"* ]] || [[ "$@" == "--watch" ]]; then
    $KUBECTL_COLOR get "$object_type" ${CONTEXT_ARGS[@]} "$@"
  else
    echo "$object_type" > $LAST_LIST_FILE
    $KUBECTL_COLOR get "$object_type" --force-colors ${CONTEXT_ARGS[@]} $@ | awk 'NR <= 1 {printf "%4s  %s\n", "", $0; next} {print | "nl -w4 -s\"  \""}' >> $LAST_LIST_FILE
    # print but skip the first line which stores the object type
    tail -n +2 $LAST_LIST_FILE
  fi
}

grep_and_switch_cluster() {
  local cluster=$1
  MATCH=""

  if [ "$KUBEX_ISOLATED" = "true" ]; then
    # Use the terminal session ID to isolate the context list
    session_id=$(tty | sed 's/\/dev\///')
    local contexts_file="$KUBEX_TMP_DIR/contexts_${session_id}.txt"
  else
    local contexts_file="$KUBEX_TMP_DIR/contexts.txt"
  fi

  handle_matching "$cluster" "$(kubectl config get-contexts --output=name)" "cluster"
  CONTEXT="$MATCH"

  if [ "$KUBEX_ISOLATED" = "true" ]; then
    write_session_config "$CONTEXT" "$NAMESPACE"
    echo "Switched to cluster ${CONTEXT} (session-only)"
  else
    kubectl config use-context "$CONTEXT"
  fi
}

get_object_details() {
  local item_number=$1

  OBJECT_TYPE=$(head -n 1 "$LAST_LIST_FILE")
  ITEM_NAME=$(get_item_name "$item_number")
}

construct_gcp_url() {
  local cluster_project="$1"
  local namespace="$2"
  local item_name="$3"
  local log_type="$4"
  local url=""

  if [[ "$log_type" == "logs" ]]; then
    url="https://console.cloud.google.com/logs/query;query=logName%3D%2528%22projects%2F${cluster_project}%2Flogs%2Fstderr%22%20OR%20%22projects%2F${cluster_project}%2Flogs%2Fstdout%22%2529%0Aresource.labels.namespace_name%3D%22${namespace}%22%0Aresource.labels.pod_name%3D%22${item_name}%22%0Aresource.labels.container_name!%3D%22istio-proxy%22;duration=PT30M?referrer=search&project=${cluster_project}"
  elif [[ "$log_type" == "metrics" ]]; then
    url="https://console.cloud.google.com/monitoring/metrics-explorer;duration=PT1H?referrer=search&project=${cluster_project}&pageState=%7B%22xyChart%22:%7B%22constantLines%22:%5B%5D,%22dataSets%22:%5B%7B%22plotType%22:%22LINE%22,%22targetAxis%22:%22Y1%22,%22timeSeriesFilter%22:%7B%22aggregations%22:%5B%7B%22crossSeriesReducer%22:%22REDUCE_MEAN%22,%22groupByFields%22:%5B%22resource.label.%5C%22container_name%5C%22%22%5D,%22perSeriesAligner%22:%22ALIGN_MEAN%22%7D%5D,%22apiSource%22:%22DEFAULT_CLOUD%22,%22crossSeriesReducer%22:%22REDUCE_MEAN%22,%22filter%22:%22metric.type%3D%5C%22kubernetes.io%2Fcontainer%2Fmemory%2Fused_bytes%5C%22%20resource.type%3D%5C%22k8s_container%5C%22%20metric.label.%5C%22memory_type%5C%22%3D%5C%22non-evictable%5C%22%20resource.label.%5C%22namespace_name%5C%22%3D%5C%22${namespace}%5C%22%20resource.label.%5C%22container_name%5C%22!%3D%5C%22istio-proxy%5C%22%20resource.label.%5C%22pod_name%5C%22%3D%5C%22${item_name}%5C%22%22,%22groupByFields%22:%5B%22resource.label.%5C%22container_name%5C%22%22%5D,%22minAlignmentPeriod%22:%2260s%22,%22perSeriesAligner%22:%22ALIGN_MEAN%22%7D%7D,%7B%22plotType%22:%22LINE%22,%22targetAxis%22:%22Y1%22,%22timeSeriesFilter%22:%7B%22aggregations%22:%5B%7B%22crossSeriesReducer%22:%22REDUCE_MEAN%22,%22groupByFields%22:%5B%22resource.label.%5C%22container_name%5C%22%22%5D,%22perSeriesAligner%22:%22ALIGN_MEAN%22%7D%5D,%22apiSource%22:%22DEFAULT_CLOUD%22,%22crossSeriesReducer%22:%22REDUCE_MEAN%22,%22filter%22:%22metric.type%3D%5C%22kubernetes.io%2Fcontainer%2Fmemory%2Flimit_bytes%5C%22%20resource.type%3D%5C%22k8s_container%5C%22%20resource.label.%5C%22namespace_name%5C%22%3D%5C%22${namespace}%5C%22%20resource.label.%5C%22container_name%5C%22!%3D%5C%22istio-proxy%5C%22%20resource.label.%5C%22pod_name%5C%22%3D%5C%22${item_name}%5C%22%22,%22groupByFields%22:%5B%22resource.label.%5C%22container_name%5C%22%22%5D,%22minAlignmentPeriod%22:%2260s%22,%22perSeriesAligner%22:%22ALIGN_MEAN%22%7D%7D,%7B%22plotType%22:%22LINE%22,%22targetAxis%22:%22Y1%22,%22timeSeriesFilter%22:%7B%22aggregations%22:%5B%7B%22crossSeriesReducer%22:%22REDUCE_MEAN%22,%22groupByFields%22:%5B%22resource.label.%5C%22container_name%5C%22%22%5D,%22perSeriesAligner%22:%22ALIGN_MEAN%22%7D%5D,%22apiSource%22:%22DEFAULT_CLOUD%22,%22crossSeriesReducer%22:%22REDUCE_MEAN%22,%22filter%22:%22metric.type%3D%5C%22kubernetes.io%2Fcontainer%2Fmemory%2Frequest_bytes%5C%22%20resource.type%3D%5C%22k8s_container%5C%22%20resource.label.%5C%22namespace_name%5C%22%3D%5C%22${namespace}%5C%22%20resource.label.%5C%22container_name%5C%22!%3D%5C%22istio-proxy%5C%22%20resource.label.%5C%22pod_name%5C%22%3D%5C%22${item_name}%5C%22%22,%22groupByFields%22:%5B%22resource.label.%5C%22container_name%5C%22%22%5D,%22minAlignmentPeriod%22:%2260s%22,%22perSeriesAligner%22:%22ALIGN_MEAN%22%7D%7D%5D,%22options%22:%7B%22mode%22:%22COLOR%22%7D,%22y1Axis%22:%7B%22label%22:%22%22,%22scale%22:%22LINEAR%22%7D%7D%7D&inv=1&invt=AbqsyA"
  fi

  echo "$url"
}

handle_matching() {
  local grep_string="$1"
  local file="$2"
  local resource_type="$3"

  if [[ -z "$grep_string" || -z "$file" ]]; then
    echo "Usage: $0 <grep_string> <file>"
    exit 1
  fi

  if [[ ! -f "$file" ]]; then
    matching_lines=$(echo "$file" | grep -n "$grep_string")
  else
    matching_lines=$(tail -n +2 "$file" | grep -n "$grep_string")
  fi

  if [[ -z "$matching_lines" ]]; then
    echo "No matching ${resource_type} found."
    exit 0
  fi

  line_count=$(echo "$matching_lines" | wc -l)

  if [[ "$line_count" -eq 1 ]]; then
    MATCH=$(echo "$matching_lines" | cut -d':' -f2- | awk '{print $1}')
  elif [[ "$line_count" -gt 1 ]]; then
    echo "Multiple matching ${resource_type} found:"
    # remove number from the file
    matching_lines=$(echo "$matching_lines" | awk -F: '{print $1 ". " $2}' | awk '{print $2}')
    echo
    echo "$matching_lines" | nl -w4 -s"  "
    echo

    read -p "Enter the line number to select: " selected_line_number

    MATCH=$(echo "$matching_lines" | awk -v line_num="$selected_line_number" 'NR == line_num { print }')
  else
    echo "Error: Unexpected condition."
    exit 1
  fi
}

display_context_details() {
  local object_type=$1
  local scope="global"

  if [ "$KUBEX_DISABLE_CONTEXT_DETAILS" != "true" ]; then
    if [ "$KUBEX_ISOLATED" = "true" ]; then
      scope="terminal"
    fi

    echo
    echo "    | CLUSTER    ${CONTEXT}"
    echo "    | NAMESPACE  ${NAMESPACE}"
    echo "    | RESOURCE   ${object_type}"
    echo "    | SCOPE      ${scope}"
    echo
  fi
}

show_last_list() {
  local grep_string="$1"

  if [ -z "$grep_string" ]; then
    display_context_details "$(head -n 1 ${LAST_LIST_FILE})"
  fi

  if [ -n $1 ]; then
    tail -n +2 "$LAST_LIST_FILE" | awk 'NF' | grep "$1" | less -KEFS
  else
    tail -n +2 "$LAST_LIST_FILE" | awk 'NF' | less -KEFS
  fi
}

###############
#   COMMANDS
###############
handle_get() {
  local object_type=$1
  local all_namespaces_opt
  local switch_ns
  local grep_string
  local namespace_substring
  local switch_ctx
  local context_substring

  shift

  if [[ "$object_type" == "last" ]]; then
    show_last_list "$@"
    exit 0
  fi

  if [[ "$1" == "in" ]]; then
    if [[ "$2" == "all" ]]; then
      all_namespaces_opt="--all-namespaces"
    else
      switch_ns=true
      namespace_substring="$2"
    fi
    shift 2
  fi

  if [[ "$1" == "on" ]]; then
    switch_ctx=true
    context_substring="$2"
    shift 2
  fi

  if [ -n "$switch_ctx" ]; then
    grep_and_switch_cluster "$context_substring"
  fi

  if [ -n "$switch_ns" ]; then
    grep_and_switch_namespace "$namespace_substring"
  fi

  if [[ -n "$1" ]] && [[ "$1" != -* ]]; then
    grep_string="$1"
    shift
  fi

  case "$object_type" in
    "p") object_type="pod"
    ;;
    "d") object_type="deployment"
    ;;
    "svc") object_type="service"
    ;;
    "sa") object_type="ServiceAccount"
    ;;
    "a") object_type="applications"
    ;;
    "vs") object_type="VirtualServices"
    ;;
    "mc") object_type="ManagedCertificate"
    ;;
    "se") object_type="ServiceEntry"
    ;;
    "sec") object_type="secret"
    ;;
    "ss") object_type="StatefulSets"
    ;;
    "ds") object_type="DaemonSets"
    ;;
    "rs") object_type="ReplicaSets"
    ;;
    "rc") object_type="ReplicaControllers"
    ;;
    "j") object_type="job"
    ;;
    "cj") object_type="cronjob"
    ;;
    "gw") object_type="gateway"
    ;;
    "i") object_type="ingress"
    ;;
    "bc") object_type="BackendConfig"
    ;;
    "dr") object_type="DestinationRule"
    ;;
    "rb") object_type="rolebinding"
    ;;
    "r") object_type="roles"
    ;;
    "crb") object_type="clusterrolebinding"
    ;;
    "cr") object_type="clusterroles"
    ;;
    "ns") object_type="namespace"
    ;;
  esac

  display_context_details "$object_type"

  if [ -n "$grep_string" ]; then
    list_items "$object_type" "$all_namespaces_opt" $@ | grep "$grep_string" | less -KEFS
  else
    list_items "$object_type" "$all_namespaces_opt" $@ | less -KEFS
  fi
}

handle_describe() {
  local item_number=$1
  shift

  if [ -z "$item_number" ]; then
    $KUBECTL_COLOR describe
    exit 1
  fi

  get_object_details "$item_number"
  set_context_args $OBJECT_TYPE

  set -x
  $KUBECTL_COLOR describe ${CONTEXT_ARGS[@]} "$OBJECT_TYPE" "$ITEM_NAME" "$@"
}

handle_delete() {
  local item_number=$1
  shift

  if [ -z "$item_number" ]; then
    $KUBECTL_COLOR delete
    exit 1
  fi

  get_object_details "$item_number"
  set_context_args $OBJECT_TYPE

  read -p "Delete $OBJECT_TYPE $ITEM_NAME (y/N)? " -r REPLY
  echo

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    set -x
    kubecolor delete ${CONTEXT_ARGS[@]} "$OBJECT_TYPE" "$ITEM_NAME" "$@"
  else
    echo "Keep it then!"
  fi
}

handle_edit() {
  local item_number=$1
  shift

  if [ -z "$item_number" ]; then
    kubectl edit
    exit 1
  fi

  get_object_details "$item_number"
  set_context_args $OBJECT_TYPE

  set -x
  kubectl edit ${CONTEXT_ARGS[@]} "$OBJECT_TYPE" "$ITEM_NAME"
}

handle_top() {
  local item_number=$1
  shift
  local current_context
  local namespace
  local cluster_project

  if [ -z "$item_number" ]; then
    $KUBECTL_COLOR top
    exit 1
  fi

  if [[ "$@" == *"--gcp"* ]]; then
    current_context_details=$(kubectl config get-contexts | grep " ${CONTEXT} ")
    cluster_project=$(echo "$current_context_details" | awk '{print $3}' | awk -F'_' '{print $2}')

    url=$(construct_gcp_url "$cluster_project" "$NAMESPACE" "$ITEM_NAME" "metrics")

    open_gcp_console_url "$url"

    exit 0
  fi

  get_object_details "$item_number"
  set_context_args $OBJECT_TYPE

  set -x
  $KUBECTL_COLOR top ${CONTEXT_ARGS[@]} "$OBJECT_TYPE" "$ITEM_NAME" "$@"
}

handle_logs() {
  local item_number=$1
  shift
  local current_context
  local namespace
  local cluster_project

  if [ -z "$item_number" ]; then
    $KUBECTL_COLOR logs
    exit 1
  fi

  if [[ "$@" == *"--gcp"* ]]; then
    current_context_details=$(kubectl config get-contexts | grep " ${CONTEXT} ")
    cluster_project=$(echo "$current_context_details" | awk '{print $3}' | awk -F'_' '{print $2}')

    url=$(construct_gcp_url "$cluster_project" "$NAMESPACE" "$ITEM_NAME" "logs")

    open_gcp_console_url "$url"

    exit 0
  fi

  get_object_details "$item_number"
  set_context_args $OBJECT_TYPE

  local tail_option=""
  if [[ "$@" == *"-f"* ]] || [[ "$@" == "--follow=true" ]]; then
    # By default, get only the last 50 line of logs if not streaming
    tail_option="--tail=50"

    if [[ "$@" == *"--tail"* ]]; then
      tail_option=""
    fi
  fi

  set -x
  kubectl logs ${CONTEXT_ARGS[@]} "$OBJECT_TYPE"/"$ITEM_NAME" $tail_option "$@"
}

handle_rr() {
  local item_number=$1
  local object_type
  local item_name

  if [ -z "$item_number" ]; then
      $KUBECTL_COLOR rollout restart
      exit 1
  fi

  if [[ $item_number =~ ^[0-9]+$ ]]; then
    get_object_details
    set -x
    $KUBECTL_COLOR rollout restart "$OBJECT_TYPE"/"$ITEM_NAME"
  else
    set -x
    $KUBECTL_COLOR rollout restart "$item_number"
  fi
}

handle_events() {
  item_number=$1
  shift

  if [ -z "$item_number" ]; then
    $KUBECTL_COLOR events
    exit 1
  fi

  get_object_details
  set_context_args $OBJECT_TYPE

  set -x
  $KUBECTL_COLOR events ${CONTEXT_ARGS[@]} --for "$OBJECT_TYPE"/"$ITEM_NAME" "$@"
}

handle_exec() {
  local item_number=$1
  shift

  kubectl exec -t -i $(get_item_name $item_number) "$@" -- sh -c "(bash || ash || sh)"
}

read_session_config

case "$COMMAND" in
  "get")
    handle_get "$@"
    ;;
  "describe")
    handle_describe "$@"
    ;;
  "delete")
    handle_delete "$@"
    ;;
  "edit")
    handle_edit "$@"
    ;;
  "top")
    handle_top "$@"
    ;;
  "switch")
    grep_and_switch_cluster "$@"
    ;;
  "logs")
    handle_logs "$@"
    ;;
  "rr")
    handle_rr "$@"
    ;;
  "events")
    handle_events "$@"
    ;;
  "exec")
    handle_exec "$@"
    ;;
  *)
    echo "Invalid command: $COMMAND"
    exit 1
    ;;
esac
